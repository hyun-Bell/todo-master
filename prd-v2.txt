# 프로젝트 요구사항 문서 (PRD) v2.0
## Todo-Master: AI 기반 개인 목표 관리 애플리케이션

### 📋 문서 정보
- **버전**: 2.0 (기술 스택 업데이트)
- **작성일**: 2025년 1월
- **대상**: 개인 사용자
- **프로젝트 유형**: 모바일 애플리케이션 (iOS/Android)

---

## 1. 제품 개요

### 1.1 비전
사용자가 막연한 목표를 구체적이고 실행 가능한 계획으로 변환하여, 체계적으로 목표를 달성할 수 있도록 돕는 AI 기반 개인 목표 관리 도구

### 1.2 핵심 가치
- **명확성**: 추상적인 목표를 구체적으로 변환
- **실행가능성**: 실제로 실행할 수 있는 단계별 계획 제공
- **지속가능성**: 알림과 추적을 통한 꾸준한 실행 지원

### 1.3 타겟 사용자
- 목표는 있지만 어떻게 시작해야 할지 모르는 사람
- 체계적인 계획 수립이 어려운 사람
- 혼자서 목표를 관리하고 싶은 개인 사용자

---

## 2. 기술 아키텍처

### 2.1 기술 스택 개요

```typescript
const techStack = {
  frontend: {
    mobile: "React Native + Expo SDK 50",
    language: "TypeScript 5.3+",
    stateManagement: "Zustand + TanStack Query",
    ui: "Tamagui",
    navigation: "Expo Router v3"
  },
  backend: {
    framework: "NestJS 10",
    language: "TypeScript 5.3+",
    orm: "Prisma 5",
    database: "Supabase (PostgreSQL)",
    cache: "Redis (Upstash)",
    queue: "BullMQ"
  },
  ai: {
    provider: "OpenAI API (GPT-4)",
    fallback: "Claude API"
  },
  infrastructure: {
    hosting: "Railway (Backend) + EAS (Mobile)",
    monitoring: "Sentry + Axiom",
    ci_cd: "GitHub Actions"
  }
};
```

### 2.2 시스템 아키텍처

```
┌─────────────────────────────────────────────────────────┐
│                    Mobile App (Expo)                     │
│  ┌─────────────┐  ┌──────────────┐  ┌───────────────┐  │
│  │   Screens   │  │  Components  │  │    Stores     │  │
│  │  (Router)   │  │  (Tamagui)   │  │  (Zustand)    │  │
│  └─────────────┘  └──────────────┘  └───────────────┘  │
└────────────────────────────┬────────────────────────────┘
                             │ HTTPS + JWT
┌────────────────────────────┴────────────────────────────┐
│                    NestJS Backend                        │
│  ┌─────────────┐  ┌──────────────┐  ┌───────────────┐  │
│  │   Modules   │  │   Services   │  │  Controllers  │  │
│  │ ├ Auth      │  │ ├ AI Service │  │ ├ /auth       │  │
│  │ ├ Goals     │  │ ├ Goal Svc   │  │ ├ /goals      │  │
│  │ ├ Plans     │  │ ├ Plan Svc   │  │ ├ /plans      │  │
│  │ └ Reminders │  │ └ Queue Svc  │  │ └ /reminders  │  │
│  └─────────────┘  └──────────────┘  └───────────────┘  │
└────────────────────────────┬────────────────────────────┘
                             │
         ┌───────────────────┼───────────────────┐
         │                   │                   │
    ┌────▼─────┐      ┌─────▼──────┐     ┌─────▼──────┐
    │Supabase  │      │   Redis    │     │  OpenAI    │
    │(Database)│      │  (Cache)   │     │   (AI)     │
    └──────────┘      └────────────┘     └────────────┘
```

---

## 3. 핵심 기능 요구사항

### 3.1 목표 입력 및 구체화

#### 3.1.1 초기 목표 입력
- 사용자는 자유 형식으로 목표를 입력할 수 있음
- 최대 500자까지 입력 가능
- 예시: "영어 공부하기", "3개월 안에 풀스택 개발자 되기"

#### 3.1.2 AI 기반 파인만 기법 적용

**NestJS 구현 구조:**
```typescript
// goals/services/ai-refinement.service.ts
@Injectable()
export class AIRefinementService {
  constructor(
    private readonly openAIService: OpenAIService,
    private readonly questionGeneratorService: QuestionGeneratorService,
  ) {}

  async generateQuestions(goalInput: string): Promise<Question[]> {
    // AI가 동적으로 질문 생성
  }

  async refineGoal(goalId: string, answers: Answer[]): Promise<RefinedGoal> {
    // 답변 기반 목표 구체화
  }
}
```

#### 3.1.3 대화형 정보 수집
- WebSocket을 통한 실시간 대화
- NestJS Gateway를 활용한 양방향 통신
- 질문-답변 히스토리 저장

#### 3.1.4 목표 최종 확인
- 트랜잭션을 통한 목표 승인 처리
- 승인 시 자동으로 플랜 생성 큐에 추가

### 3.2 AI 플랜 생성

#### 3.2.1 세부 플랜 자동 생성

**NestJS 큐 시스템 활용:**
```typescript
// plans/processors/plan-generation.processor.ts
@Processor('plan-generation')
export class PlanGenerationProcessor {
  @Process('generate-plans')
  async handlePlanGeneration(job: Job<GeneratePlansJobData>) {
    // 1. AI를 통한 플랜 생성
    // 2. 종속성 분석
    // 3. 우선순위 계산
    // 4. DB 저장
  }
}
```

### 3.3 플랜 관리

#### 3.3.1 플랜 상태 관리

**NestJS 상태 머신 패턴:**
```typescript
// plans/services/plan-state.service.ts
@Injectable()
export class PlanStateService {
  private readonly transitions = {
    pending: ['ready', 'cancelled'],
    ready: ['in_progress', 'cancelled'],
    in_progress: ['paused', 'completed', 'cancelled'],
    // ... 기타 상태 전이
  };

  async transitionState(planId: string, newStatus: PlanStatus): Promise<Plan> {
    // 상태 전이 검증 및 처리
  }
}
```

### 3.4 알림 및 리마인더

#### 3.4.1 알림 시스템 구조

**NestJS 스케줄러 활용:**
```typescript
// reminders/services/reminder-scheduler.service.ts
@Injectable()
export class ReminderSchedulerService {
  @Cron('0 * * * *') // 매시간 실행
  async processScheduledReminders() {
    // 1. 예정된 알림 조회
    // 2. 푸시 알림 발송
    // 3. 발송 기록 저장
  }
}
```

---

## 4. 데이터 모델 (Prisma Schema)

```prisma
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  createdAt       DateTime         @default(now())
  goals           Goal[]
  preferences     UserPreferences?
  reminders       Reminder[]
}

model Goal {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  originalInput   String           @db.VarChar(500)
  refinedGoal     String?
  category        String?
  status          GoalStatus       @default(DRAFT)
  targetDate      DateTime?
  estimatedDays   Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  approvedAt      DateTime?
  plans           Plan[]
  questions       Question[]
  answers         Answer[]
  metadata        Json             @default("{}")
  tags            String[]         @default([])
}

model Plan {
  id              String           @id @default(cuid())
  goalId          String
  goal            Goal             @relation(fields: [goalId], references: [id])
  parentPlanId    String?
  parentPlan      Plan?            @relation("SubPlans", fields: [parentPlanId], references: [id])
  subPlans        Plan[]           @relation("SubPlans")
  title           String           @db.VarChar(200)
  description     String           @db.Text
  estimatedHours  Float
  actualHours     Float            @default(0)
  priority        Int              @default(3)
  status          PlanStatus       @default(PENDING)
  progress        Int              @default(0)
  scheduledDate   DateTime?
  dueDate         DateTime?
  completedAt     DateTime?
  dependencies    PlanDependency[] @relation("DependentPlan")
  dependents      PlanDependency[] @relation("DependencyPlan")
  statusHistory   StatusHistory[]
  checkpoints     Checkpoint[]
  reminders       Reminder[]
  metadata        Json             @default("{}")
  tags            String[]         @default([])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// 열거형 정의
enum GoalStatus {
  DRAFT
  ANALYZING
  REFINED
  APPROVED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum PlanStatus {
  PENDING
  READY
  IN_PROGRESS
  PAUSED
  BLOCKED
  COMPLETED
  CANCELLED
  OVERDUE
  IN_REVIEW
}
```

---

## 5. API 엔드포인트 구조

### 5.1 RESTful API 설계

```typescript
// NestJS 컨트롤러 구조
@ApiTags('goals')
@Controller('goals')
export class GoalsController {
  @Post()
  @ApiOperation({ summary: '새 목표 생성' })
  create(@Body() createGoalDto: CreateGoalDto) {}

  @Post(':id/questions')
  @ApiOperation({ summary: 'AI 질문 생성' })
  generateQuestions(@Param('id') id: string) {}

  @Post(':id/answers')
  @ApiOperation({ summary: '질문에 대한 답변 제출' })
  submitAnswers(@Param('id') id: string, @Body() answers: AnswerDto[]) {}

  @Post(':id/approve')
  @ApiOperation({ summary: '목표 승인' })
  approve(@Param('id') id: string) {}
}

@ApiTags('plans')
@Controller('plans')
export class PlansController {
  @Get()
  @ApiOperation({ summary: '플랜 목록 조회' })
  findAll(@Query() query: PlanFilterDto) {}

  @Patch(':id/status')
  @ApiOperation({ summary: '플랜 상태 변경' })
  updateStatus(@Param('id') id: string, @Body() updateStatusDto: UpdatePlanStatusDto) {}

  @Post(':id/progress')
  @ApiOperation({ summary: '진행률 업데이트' })
  updateProgress(@Param('id') id: string, @Body() progressDto: UpdateProgressDto) {}
}
```

### 5.2 WebSocket 이벤트

```typescript
// gateways/goal-refinement.gateway.ts
@WebSocketGateway()
export class GoalRefinementGateway {
  @SubscribeMessage('start-refinement')
  handleStartRefinement(@MessageBody() data: { goalId: string }) {}

  @SubscribeMessage('submit-answer')
  handleSubmitAnswer(@MessageBody() data: { questionId: string; answer: any }) {}
}
```

---

## 6. 보안 및 인증

### 6.1 인증 전략

```typescript
// auth/strategies/supabase.strategy.ts
@Injectable()
export class SupabaseStrategy extends PassportStrategy(Strategy, 'supabase') {
  constructor(private configService: ConfigService) {
    super({
      supabaseUrl: configService.get('SUPABASE_URL'),
      supabaseKey: configService.get('SUPABASE_ANON_KEY'),
    });
  }

  async validate(payload: any) {
    return { userId: payload.sub, email: payload.email };
  }
}
```

### 6.2 권한 관리

```typescript
// common/guards/owner.guard.ts
@Injectable()
export class OwnerGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean | Promise<boolean> {
    // 리소스 소유권 검증
  }
}
```

---

## 7. 성능 최적화

### 7.1 캐싱 전략

```typescript
// common/interceptors/cache.interceptor.ts
@Injectable()
export class CacheInterceptor implements NestInterceptor {
  constructor(private cacheManager: Cache) {}
  
  async intercept(context: ExecutionContext, next: CallHandler) {
    // Redis 캐싱 로직
  }
}
```

### 7.2 데이터베이스 최적화
- Prisma의 `include` 및 `select` 최적화
- 인덱스 전략 (userId, status, scheduledDate)
- 배치 처리를 통한 N+1 문제 해결

---

## 8. 모니터링 및 로깅

### 8.1 로깅 설정

```typescript
// common/middleware/logger.middleware.ts
@Injectable()
export class LoggerMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    // 구조화된 로깅
  }
}
```

### 8.2 에러 추적
- Sentry 통합
- 커스텀 에러 필터
- 에러 분류 및 알림

---

## 9. 배포 및 DevOps

### 9.1 Docker 설정

```dockerfile
# Dockerfile
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM node:20-alpine
WORKDIR /app
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
EXPOSE 3000
CMD ["node", "dist/main"]
```

### 9.2 CI/CD 파이프라인

```yaml
# .github/workflows/deploy.yml
name: Deploy to Railway
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
```

---

## 10. 개발 로드맵

### Phase 1: 기초 설정 (2주)
- [ ] NestJS 프로젝트 초기화
- [ ] Prisma + Supabase 연동
- [ ] 인증 시스템 구현
- [ ] 기본 CRUD API

### Phase 2: AI 통합 (3주)
- [ ] OpenAI 서비스 모듈
- [ ] 질문 생성 로직
- [ ] 목표 구체화 프로세스
- [ ] WebSocket 실시간 통신

### Phase 3: 플랜 관리 (3주)
- [ ] 플랜 생성 큐 시스템
- [ ] 상태 관리 서비스
- [ ] 종속성 처리
- [ ] 진행률 추적

### Phase 4: 알림 시스템 (2주)
- [ ] 스케줄러 구현
- [ ] FCM 푸시 알림
- [ ] 알림 설정 API

### Phase 5: 모바일 앱 (4주)
- [ ] Expo 프로젝트 설정
- [ ] 화면 구현
- [ ] API 연동
- [ ] 로컬 알림

---

## 11. 학습 리소스 (NestJS)

### 11.1 추천 학습 순서
1. **NestJS 기초**
   - 공식 문서의 First Steps
   - Controllers, Providers, Modules 이해
   - Dependency Injection 패턴

2. **실전 개념**
   - Guards와 Interceptors
   - Pipes와 Validation
   - Exception Filters

3. **고급 주제**
   - Microservices
   - WebSockets
   - Queue 시스템

### 11.2 Todo-Master 구현을 통해 배울 수 있는 것
- 엔터프라이즈급 아키텍처 설계
- 타입 안전한 API 개발
- 실시간 통신 구현
- 비동기 작업 처리
- 테스트 주도 개발

이 PRD는 NestJS 학습과 실제 프로젝트 구현을 동시에 진행할 수 있도록 설계되었습니다.