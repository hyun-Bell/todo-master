# Task ID: 28
# Title: Health Check 및 모니터링 시스템 구현
# Status: pending
# Dependencies: 14, 23, 24, 25, 26
# Priority: high
# Description: 프로덕션 준비를 위한 시스템 상태 모니터링 구현. 데이터베이스, Redis, Supabase 연결 상태 체크 및 시스템 리소스 모니터링을 위한 Health Service와 Prometheus/Grafana 연동.
# Details:
NestJS에 @nestjs/terminus 모듈 설치 및 HealthModule 구현, HealthController에 /health 엔드포인트 설정 (상태 요약) 및 /health/detailed (상세 정보), 데이터베이스 health indicator 구현 (Prisma 연결 상태 확인), Redis health indicator 구현 (Redis/Upstash 연결 및 응답 시간 체크), Supabase health indicator 커스텀 구현 (REST API 및 Auth 서비스 상태), 시스템 리소스 모니터링 (CPU, 메모리, 디스크 사용량), WebSocket 연결 수 및 활성 세션 모니터링, BullMQ 큐 상태 모니터링 (대기/처리 중/실패 작업 수), Prometheus 메트릭 수집을 위한 @willsoto/nestjs-prometheus 설정, 커스텀 메트릭 정의 (API 응답 시간, 에러율, 동시 접속자 수), Grafana 대시보드 구성 (시스템 메트릭 시각화, 알림 규칙 설정), Docker Compose에 Prometheus/Grafana 서비스 추가, Health check 실패 시 알림 시스템 통합 (Slack/Discord webhook), Graceful shutdown 시 health check 상태 업데이트, React Native 앱에서 시스템 상태 표시 UI 구현

# Test Strategy:
모든 health indicator의 정상/비정상 상태 테스트, 데이터베이스 연결 끊김 시 health check 응답 검증, Redis 타임아웃 시나리오 테스트, Supabase API 장애 시 fallback 동작 확인, 시스템 리소스 임계값 초과 시 경고 상태 테스트, Prometheus 메트릭 수집 정확성 검증, WebSocket 대량 연결 시 모니터링 정확도 테스트, BullMQ 작업 적체 시 health 상태 변경 확인, E2E 테스트로 전체 시스템 health check 플로우 검증, 부하 테스트 중 모니터링 시스템 안정성 확인

# Subtasks:
## 1. Health Check 모듈 기본 설정 및 구조 구현 [pending]
### Dependencies: None
### Description: @nestjs/terminus 설치 및 HealthModule 생성, HealthController에 기본 엔드포인트(/health, /health/detailed) 구현
### Details:
@nestjs/terminus 패키지 설치, HealthModule 생성 및 AppModule에 등록, HealthController 구현하여 /health (간단한 상태 요약)와 /health/detailed (상세 정보) 엔드포인트 설정, 기본 응답 구조 정의 (status, timestamp, uptime, services 정보), HTTP 상태 코드 매핑 (정상: 200, 부분 장애: 503)

## 2. 외부 서비스 Health Indicators 구현 [pending]
### Dependencies: 28.1
### Description: 데이터베이스(Prisma), Redis, Supabase 연결 상태를 체크하는 커스텀 Health Indicator 구현
### Details:
PrismaHealthIndicator 구현 (Prisma 연결 상태 및 쿼리 응답 시간 체크), RedisHealthIndicator 구현 (Redis/Upstash PING 명령어로 연결 확인 및 레이턴시 측정), SupabaseHealthIndicator 구현 (REST API 엔드포인트 및 Auth 서비스 상태 확인), 각 indicator에 타임아웃 설정 (기본 5초), 실패 시 에러 메시지 및 재시도 로직 구현

## 3. 시스템 리소스 및 애플리케이션 메트릭 모니터링 [pending]
### Dependencies: 28.1
### Description: CPU, 메모리, 디스크 사용량 모니터링 및 WebSocket 연결 수, BullMQ 큐 상태 체크 구현
### Details:
SystemHealthIndicator 구현 (process.cpuUsage(), process.memoryUsage() 활용), DiskHealthIndicator 구현 (node-disk-info 라이브러리 사용), WebSocketHealthIndicator 구현 (활성 연결 수 및 세션 정보 추적), BullMQHealthIndicator 구현 (대기/처리 중/실패 작업 수 모니터링), 각 지표별 임계값 설정 가능한 구조 구현 (CPU > 80%, Memory > 90% 등)

## 4. Prometheus 메트릭 수집 및 Grafana 대시보드 구성 [pending]
### Dependencies: 28.2, 28.3
### Description: @willsoto/nestjs-prometheus 설정으로 메트릭 수집 시스템 구축 및 Grafana 대시보드 구성
### Details:
@willsoto/nestjs-prometheus 패키지 설치 및 PrometheusModule 설정, /metrics 엔드포인트 노출, 커스텀 메트릭 정의 (http_request_duration_seconds, http_requests_total, websocket_connections_gauge, queue_jobs_total), API 응답 시간 측정 인터셉터 구현, 에러율 계산 메트릭 추가, Docker Compose에 Prometheus 서비스 추가 (scrape 설정 포함), Grafana 서비스 추가 및 기본 대시보드 JSON 템플릿 제공

## 5. 알림 시스템 통합 및 Graceful Shutdown 구현 [pending]
### Dependencies: 28.2, 28.3, 28.4
### Description: Health check 실패 시 Slack/Discord 알림 전송 및 애플리케이션 종료 시 안전한 상태 업데이트 구현
### Details:
AlertService 구현 (Slack webhook, Discord webhook 지원), Health check 실패 이벤트 리스너 구현 (3회 연속 실패 시 알림), 알림 메시지 템플릿 정의 (서비스명, 상태, 타임스탬프, 에러 메시지), Graceful shutdown 핸들러 구현 (SIGTERM, SIGINT 처리), 종료 시 health status를 'shutting down'으로 변경, 진행 중인 요청 완료 대기 (최대 30초), React Native 앱에 시스템 상태 표시 컴포넌트 구현 (status badge, 서비스별 상태 리스트)

