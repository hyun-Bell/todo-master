{
  "master": {
    "tasks": [
      {
        "id": 13,
        "title": "프로젝트 기본 구조 설정 및 개발 환경 구축",
        "description": "React Native + TypeScript 기반 프로젝트 초기 설정 및 개발 환경 구축",
        "details": "React Native CLI로 새 프로젝트 생성, TypeScript 설정, ESLint/Prettier 설정, 폴더 구조 구성 (src/components, src/screens, src/services, src/types, src/utils), package.json 의존성 설정 (react-native, typescript, @types/react-native), Metro 번들러 설정",
        "testStrategy": "프로젝트 빌드 성공 확인, TypeScript 컴파일 에러 없음, iOS/Android 시뮬레이터에서 기본 화면 실행 확인",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "React Native 프로젝트 초기화 및 TypeScript 설정",
            "description": "React Native CLI를 사용하여 새 프로젝트를 생성하고 TypeScript를 기본 언어로 설정",
            "dependencies": [],
            "details": "npx react-native init TodoMaster --template react-native-template-typescript 명령으로 프로젝트 생성, tsconfig.json 파일 검토 및 필요시 수정 (strict mode 활성화, baseUrl 설정, paths 별칭 설정), React Native 0.70+ 버전 사용 권장, iOS/Android 폴더 생성 확인\n<info added on 2025-07-14T13:52:28.346Z>\n프로젝트 생성 및 TypeScript 설정 완료. pnpm을 패키지 매니저로 전환 (npm에서 마이그레이션). 일부 타입 정의 관련 에러 존재하나 프로젝트 빌드 및 실행 가능. tsconfig.json에 strict mode 활성화 및 기본 경로 별칭 설정 완료.\n</info added on 2025-07-14T13:52:28.346Z>",
            "status": "done",
            "testStrategy": "npm run tsc --noEmit으로 TypeScript 컴파일 에러 확인, npx react-native run-ios 및 run-android로 기본 앱 실행 확인"
          },
          {
            "id": 2,
            "title": "프로젝트 폴더 구조 설정 및 경로 별칭 구성",
            "description": "표준화된 폴더 구조를 생성하고 절대 경로 import를 위한 별칭 설정",
            "dependencies": [
              1
            ],
            "details": "src/ 디렉토리 생성 후 하위에 components/, screens/, services/, types/, utils/, navigation/, hooks/, constants/, assets/ 폴더 생성, babel.config.js에 module-resolver 플러그인 추가하여 @components, @screens 등 경로 별칭 설정, tsconfig.json의 paths 설정과 동기화, 각 폴더에 index.ts 파일 생성하여 barrel export 구조 준비\n<info added on 2025-07-14T13:58:54.261Z>\n프로젝트 폴더 구조 설정이 완료되었습니다. src 디렉토리 하위에 components, screens, services, types, utils, navigation, hooks, constants, assets 총 9개의 필수 폴더가 생성되었습니다. babel.config.js와 tsconfig.json에 경로 별칭(@components, @screens, @services, @types, @utils, @navigation, @hooks, @constants, @assets)이 설정되어 절대 경로 import가 가능합니다. 샘플 Button 컴포넌트를 생성하여 별칭 import 테스트를 완료했으며, TypeScript 컴파일 에러가 없음을 확인했습니다.\n</info added on 2025-07-14T13:58:54.261Z>",
            "status": "done",
            "testStrategy": "각 폴더에 샘플 파일 생성 후 별칭을 사용한 import 테스트, VSCode IntelliSense 자동완성 동작 확인"
          },
          {
            "id": 3,
            "title": "ESLint 및 Prettier 설정으로 코드 품질 도구 구성",
            "description": "일관된 코드 스타일과 품질을 위한 Linting 및 포맷팅 도구 설정",
            "dependencies": [
              2
            ],
            "details": "npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-prettier eslint-plugin-prettier prettier eslint-plugin-react eslint-plugin-react-hooks 설치, .eslintrc.js 파일 생성 (React Native + TypeScript 규칙 적용), .prettierrc.js 파일 생성 (세미콜론, 따옴표, 들여쓰기 규칙 설정), .eslintignore 및 .prettierignore 파일 생성, package.json에 lint 및 format 스크립트 추가\n<info added on 2025-07-14T14:08:03.184Z>\n설정 완료됨. TypeScript strict 모드 활성화하여 엄격한 타입 체크 적용. eslint-plugin-import 추가하여 import 문 자동 정렬 기능 구성. React hooks 규칙 검증을 위한 exhaustive-deps 규칙 활성화. package.json에 lint, lint:fix, format, format:check, typecheck 스크립트 모두 추가 완료. 전체 코드베이스에서 ESLint 및 TypeScript 검사 실행하여 에러 없음 확인.\n</info added on 2025-07-14T14:08:03.184Z>",
            "status": "done",
            "testStrategy": "npm run lint로 전체 프로젝트 린트 실행, 의도적으로 스타일 위반 코드 작성 후 자동 수정 확인"
          },
          {
            "id": 4,
            "title": "필수 의존성 설치 및 Metro 번들러 최적화",
            "description": "프로젝트에 필요한 핵심 라이브러리 설치 및 Metro 번들러 설정 최적화",
            "dependencies": [
              3
            ],
            "details": "npm install react-native-safe-area-context react-native-screens react-native-gesture-handler react-native-reanimated @react-navigation/native @react-navigation/stack react-native-vector-icons 설치, metro.config.js 수정하여 SVG 지원 추가, 번들 크기 최적화 설정, 캐시 설정 추가, react-native.config.js 생성하여 자동 링킹 설정, iOS의 경우 cd ios && pod install 실행\n<info added on 2025-07-14T14:13:05.736Z>\n유틸리티 라이브러리 설치 완료: @react-native-async-storage/async-storage, axios, date-fns, react-hook-form, zod 설치. Metro 설정 최적화 완료: transformer.minifierConfig에 inlineRequires: true 설정으로 초기 로드 성능 개선, resolver.unstable_enablePackageExports 활성화로 최신 패키지 exports 지원. 모든 라이브러리의 TypeScript 타입 정의(@types/react-native-vector-icons) 추가 완료. iOS pod install 실행 완료.\n</info added on 2025-07-14T14:13:05.736Z>",
            "status": "done",
            "testStrategy": "모든 의존성 설치 후 빌드 성공 확인, Metro 번들러 시작 시 에러 없음 확인, 샘플 네비게이션 스택 생성하여 동작 테스트"
          },
          {
            "id": 5,
            "title": "개발 환경 변수 설정 및 디버깅 도구 구성",
            "description": "환경 변수 관리 시스템 구축 및 개발 생산성을 위한 디버깅 도구 설정",
            "dependencies": [
              4
            ],
            "details": "npm install react-native-config react-native-flipper 설치, .env, .env.development, .env.production 파일 생성, 환경 변수 타입 정의 파일 (src/types/env.d.ts) 생성, Flipper 디버깅 도구 설정, React Native Debugger 연동 설정, Reactotron 설치 및 설정 (선택사항), package.json에 환경별 실행 스크립트 추가\n<info added on 2025-07-14T14:18:00.818Z>\n환경 변수 설정 완료. react-native-config으로 .env, .env.development, .env.production 파일 생성 및 설정. src/types/env.d.ts에 환경 변수 타입 정의 추가로 타입 안정성 확보. \n\n개발 도구 구성 완료. react-native-flipper 설치 및 초기 설정 완료. 개발 환경 로깅을 위한 logger 유틸리티 구현 (src/utils/logger.ts에 환경별 로그 레벨 설정).\n\npackage.json 스크립트 업데이트 완료. 환경별 실행 스크립트 추가: android:dev, android:prod, ios:dev, ios:prod. 캐시 정리를 위한 clean, clean:metro 스크립트 추가로 빌드 문제 해결 지원.\n</info added on 2025-07-14T14:18:00.818Z>",
            "status": "done",
            "testStrategy": "환경 변수 읽기 테스트, Flipper 연결 및 네트워크 로그 확인, React DevTools 연동 확인, 개발/프로덕션 환경 전환 테스트"
          }
        ]
      },
      {
        "id": 14,
        "title": "Supabase 데이터베이스 설계 및 Prisma ORM 연동",
        "description": "PostgreSQL 기반 Supabase 데이터베이스 스키마 설계 및 Prisma를 통한 백엔드/프론트엔드 연동",
        "status": "in-progress",
        "dependencies": [
          13
        ],
        "priority": "high",
        "details": "Supabase 프로젝트 생성, Prisma 스키마 정의 (users, goals, plans, checkpoints, notifications), Row Level Security 설정, API 키 설정, NestJS 백엔드에 Prisma 클라이언트 설정, React Native 앱에 Supabase 클라이언트 라이브러리 설치 및 초기화, 환경 변수 설정 (.env 파일)",
        "testStrategy": "데이터베이스 연결 테스트, Prisma 마이그레이션 테스트, 기본 CRUD 작업 테스트, RLS 정책 동작 확인",
        "subtasks": [
          {
            "id": 1,
            "title": "Supabase 프로젝트 생성 및 환경 설정",
            "description": "Supabase 클라우드 프로젝트를 생성하고 React Native 프로젝트와 연동하기 위한 환경 변수 및 클라이언트 라이브러리 설정",
            "dependencies": [],
            "details": "Supabase 대시보드에서 새 프로젝트 생성, 프로젝트 URL과 anon key 획득, .env 파일 생성 및 환경 변수 설정 (SUPABASE_URL, SUPABASE_ANON_KEY), react-native-dotenv 설치 및 설정, @supabase/supabase-js 클라이언트 라이브러리 설치, src/lib/supabase.ts 파일에 Supabase 클라이언트 초기화 코드 작성",
            "status": "done",
            "testStrategy": "Supabase 클라이언트 연결 테스트, 환경 변수 로드 확인"
          },
          {
            "id": 2,
            "title": "데이터베이스 테이블 스키마 설계 및 생성",
            "description": "목표 관리 앱에 필요한 핵심 테이블들의 스키마를 설계하고 Supabase SQL 에디터를 통해 생성",
            "dependencies": [
              1
            ],
            "details": "users 테이블 (id, email, created_at, updated_at), goals 테이블 (id, user_id, title, description, category, deadline, status, created_at), plans 테이블 (id, goal_id, title, description, order, status, created_at), checkpoints 테이블 (id, plan_id, title, is_completed, completed_at, created_at), notifications 테이블 (id, user_id, type, title, message, is_read, created_at) 생성, 각 테이블 간 외래 키 관계 설정, 인덱스 생성 (user_id, goal_id 등)",
            "status": "done",
            "testStrategy": "테이블 생성 확인, 관계 무결성 테스트, 샘플 데이터 삽입 테스트"
          },
          {
            "id": 3,
            "title": "Row Level Security (RLS) 정책 구현",
            "description": "각 테이블에 대한 Row Level Security 정책을 설정하여 사용자별 데이터 접근 권한 제어",
            "dependencies": [
              2
            ],
            "details": "모든 테이블에 RLS 활성화, users 테이블: 자신의 프로필만 조회/수정 가능, goals 테이블: 자신의 목표만 CRUD 가능, plans/checkpoints 테이블: 자신의 목표에 속한 항목만 CRUD 가능, notifications 테이블: 자신의 알림만 조회/수정 가능, auth.uid() 함수를 활용한 정책 작성, INSERT/SELECT/UPDATE/DELETE 각 작업별 정책 설정",
            "status": "done",
            "testStrategy": "다른 사용자의 데이터 접근 시도 테스트, 권한 없는 작업 차단 확인"
          },
          {
            "id": 4,
            "title": "Prisma 스키마 정의 및 NestJS 백엔드 설정",
            "description": "Supabase 데이터베이스와 동기화된 Prisma 스키마 정의 및 NestJS에서 Prisma 클라이언트 설정",
            "dependencies": [
              3
            ],
            "details": "NestJS 백엔드 프로젝트에 Prisma 5 설치, prisma/schema.prisma 파일에 데이터베이스 스키마 정의, DATABASE_URL 환경변수로 Supabase 연결 설정, prisma db pull로 기존 스키마 가져오기, @prisma/client 생성 및 NestJS 모듈로 주입, PrismaService 생성 및 전역 프로바이더 등록\n<info added on 2025-07-14T17:16:30.771Z>\nNestJS 백엔드 프로젝트 생성 완료. @nestjs/cli로 새 프로젝트 초기화, TypeScript 설정 최적화, 프로젝트 구조 정리. Docker Compose를 통한 로컬 개발 환경 구성 추가. docker-compose.yml 파일 작성하여 PostgreSQL 15 컨테이너 설정, 로컬 개발용 데이터베이스 포트 5432 노출, 볼륨 마운트로 데이터 영속성 보장. .env.local 파일에 로컬 PostgreSQL 연결 정보 설정, Prisma 클라이언트가 Docker 컨테이너의 PostgreSQL과 연결되도록 DATABASE_URL 환경변수 구성. docker-compose up -d로 로컬 데이터베이스 실행, prisma migrate dev로 로컬 환경에서 스키마 마이그레이션 테스트 가능.\n</info added on 2025-07-14T17:16:30.771Z>\n<info added on 2025-07-14T17:25:43.198Z>\n완료된 작업 요약: 1) NestJS 백엔드 프로젝트 성공적으로 생성 및 구성 완료. 2) Prisma 6 설치 및 스키마 정의 완료 (5개 테이블 + Enum 타입). 3) PrismaService와 PrismaModule 생성하여 NestJS DI 시스템에 통합. 4) Docker Compose를 사용한 로컬 PostgreSQL 15 데이터베이스 환경 구축 완료. 5) 환경별 설정 파일 구성 (.env.local) 및 로컬 DB 연결 성공. 6) Prisma 마이그레이션 실행하여 모든 테이블 생성 확인. 7) Health check 엔드포인트로 데이터베이스 연결 상태 확인 가능. 8) 편리한 npm 스크립트 추가 (db:start, db:stop, db:reset).\n</info added on 2025-07-14T17:25:43.198Z>",
            "status": "done",
            "testStrategy": "Prisma 마이그레이션 실행 확인, NestJS에서 Prisma 서비스 주입 테스트, 기본 쿼리 동작 확인"
          },
          {
            "id": 5,
            "title": "TypeScript 타입 정의 및 데이터베이스 API 엔드포인트 구현",
            "description": "Prisma 생성 타입을 활용한 TypeScript 인터페이스 정의 및 NestJS REST API 엔드포인트 구현",
            "dependencies": [
              4
            ],
            "details": "Prisma가 자동 생성한 타입 활용, NestJS 컨트롤러 및 서비스 레이어 구현 (UsersController, GoalsController 등), 각 엔티티별 CRUD 엔드포인트 구현, DTO 클래스 정의 및 class-validator 적용, Swagger 문서화 데코레이터 추가, 에러 핸들링 및 응답 표준화",
            "status": "pending",
            "testStrategy": "각 API 엔드포인트 E2E 테스트, DTO 검증 테스트, Swagger 문서 생성 확인"
          },
          {
            "id": 6,
            "title": "실시간 구독 및 동기화 기능 구현",
            "description": "Supabase Realtime 기능과 NestJS WebSocket을 활용한 실시간 데이터 동기화 구현",
            "dependencies": [
              5
            ],
            "details": "NestJS에 @nestjs/websockets 및 socket.io 설정, Supabase Realtime 구독을 NestJS 게이트웨이에서 관리, React Native 앱에서 Socket.IO 클라이언트 연결, goals, plans, checkpoints 테이블 변경사항 실시간 전파, 연결 관리 및 재연결 로직 구현, Redis (Upstash)를 활용한 WebSocket 세션 관리",
            "status": "pending",
            "testStrategy": "WebSocket 연결 테스트, 실시간 데이터 동기화 확인, 다중 클라이언트 동시 업데이트 테스트"
          }
        ]
      },
      {
        "id": 15,
        "title": "NestJS 기반 인증 시스템 및 Supabase Auth 연동",
        "description": "NestJS에서 Passport.js와 Supabase Auth를 활용한 JWT 기반 인증 시스템 구현",
        "status": "pending",
        "dependencies": [
          14
        ],
        "priority": "high",
        "details": "NestJS에 @nestjs/passport, passport-jwt 설정, Supabase Auth와 NestJS 인증 동기화, AuthModule/AuthService/AuthController 구현, JWT 토큰 검증 미들웨어, 가드(Guards) 구현, React Native 앱에서 Zustand로 인증 상태 관리, @react-native-async-storage/async-storage로 토큰 저장, 토큰 갱신 인터셉터 구현",
        "testStrategy": "NestJS 인증 엔드포인트 테스트, JWT 토큰 발급/검증 테스트, 가드 동작 확인, React Native 앱 인증 플로우 테스트",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "NestJS AI 서비스 모듈 및 파인만 기법 구현",
        "description": "NestJS에 OpenAI/Claude API 통합 모듈 구축 및 파인만 기법 기반 대화 시스템 백엔드 구현",
        "status": "pending",
        "dependencies": [
          15
        ],
        "priority": "high",
        "details": "NestJS AIModule 생성, OpenAI/Claude SDK 통합, 파인만 기법 프롬프트 템플릿 관리 시스템, 대화 세션 관리 (Redis 활용), 스트리밍 응답 지원, BullMQ를 활용한 비동기 처리 큐, 응답 캐싱 전략, React Native 앱에서 TanStack Query로 AI 응답 관리",
        "testStrategy": "AI 서비스 모듈 단위 테스트, 프롬프트 템플릿 테스트, 대화 세션 관리 테스트, 스트리밍 응답 테스트",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "React Native + Tamagui 목표 입력 및 대화 UI 구현",
        "description": "Expo SDK 50과 Tamagui를 활용한 목표 입력 및 AI 대화 인터페이스 구현",
        "status": "pending",
        "dependencies": [
          16
        ],
        "priority": "medium",
        "details": "Tamagui 테마 및 컴포넌트 시스템 설정, 목표 입력 Form 컴포넌트 (react-hook-form + zod), AI 대화 메시지 리스트 컴포넌트, 답변 입력 컨트롤 (Tamagui Input, Select, Slider), 대화 상태 관리 (Zustand), TanStack Query로 AI 응답 페칭, Expo 제스처 핸들러로 스크롤 최적화, 키보드 회피 뷰 구현",
        "testStrategy": "Tamagui 컴포넌트 렌더링 테스트, 폼 검증 로직 테스트, 대화 플로우 통합 테스트, Expo Go 앱 테스트",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "NestJS AI 플랜 생성 엔진 및 BullMQ 작업 큐 구현",
        "description": "NestJS에서 AI 플랜 생성 로직과 BullMQ를 활용한 비동기 처리 시스템 구현",
        "status": "pending",
        "dependencies": [
          17
        ],
        "priority": "high",
        "details": "PlansModule 생성 및 AI 플랜 생성 서비스 구현, BullMQ 작업 큐 설정 (Redis/Upstash 연동), 플랜 생성 작업 프로세서 구현, 계층적 플랜 구조 지원 로직, Prisma 트랜잭션으로 플랜 일괄 저장, 플랜 생성 진행률 SSE(Server-Sent Events) 전송, React Native에서 EventSource 폴리필로 진행률 수신",
        "testStrategy": "플랜 생성 엔진 단위 테스트, BullMQ 작업 처리 테스트, 트랜잭션 롤백 테스트, SSE 스트리밍 테스트",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "NestJS 플랜 상태 관리 시스템 및 비즈니스 로직 구현",
        "description": "NestJS에서 플랜 상태 머신과 종속성 관리 비즈니스 로직 구현",
        "status": "pending",
        "dependencies": [
          18
        ],
        "priority": "medium",
        "details": "PlansService에 상태 머신 패턴 구현, 상태 전환 규칙 및 검증 로직, 종속성 그래프 관리 (순환 참조 검사), Prisma 쿼리 최적화 (include, select), 진행률 계산 알고리즘 구현, 스케줄러(@nestjs/schedule)로 상태 자동 업데이트, React Native 앱에서 Zustand로 플랜 상태 동기화",
        "testStrategy": "상태 머신 전환 테스트, 종속성 검증 테스트, 동시성 처리 테스트, 진행률 계산 정확성 테스트",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "React Native + Tamagui 플랜 대시보드 구현",
        "description": "Tamagui 컴포넌트로 플랜 목록 및 상세 화면 UI 구현",
        "status": "pending",
        "dependencies": [
          19
        ],
        "priority": "medium",
        "details": "Tamagui Sheet로 플랜 상세 모달 구현, 진행률 시각화 (Tamagui Progress), FlatList 최적화로 대량 플랜 렌더링, 상태별 섹션 리스트 구현, TanStack Query 무한 스크롤, Zustand 선택자로 필터/정렬 상태 관리, React Native Reanimated로 상태 전환 애니메이션, Expo Router로 플랜 상세 네비게이션",
        "testStrategy": "Tamagui 컴포넌트 스냅샷 테스트, FlatList 성능 테스트, 무한 스크롤 동작 테스트, 네비게이션 플로우 테스트",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "NestJS 알림 서비스 및 Expo 푸시 알림 구현",
        "description": "NestJS에서 알림 스케줄링과 Expo Push Notifications 연동",
        "status": "pending",
        "dependencies": [
          20
        ],
        "priority": "medium",
        "details": "NestJS NotificationsModule 구현, Expo Push Token 관리 엔드포인트, BullMQ로 알림 스케줄링 큐 구현, 알림 템플릿 관리 시스템, Prisma로 알림 이력 저장, React Native에서 expo-notifications 설정, 알림 권한 요청 플로우, Zustand로 알림 설정 상태 관리, 백그라운드 태스크 처리",
        "testStrategy": "알림 스케줄링 테스트, Expo 푸시 토큰 검증 테스트, 알림 전송 E2E 테스트, 백그라운드 알림 수신 테스트",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "React Native 캘린더 뷰 및 일정 관리 구현",
        "description": "React Native에서 플랜 일정을 관리하는 캘린더 화면 구현",
        "status": "pending",
        "dependencies": [
          21
        ],
        "priority": "low",
        "details": "react-native-calendars 라이브러리 통합, Tamagui 테마와 스타일 통합, 월/주/일 뷰 전환 구현, TanStack Query로 일정 데이터 페칭, Zustand로 선택된 날짜 상태 관리, 플랜 일정 마커 표시, React Native Gesture Handler로 드래그 일정 조정, NestJS 엔드포인트로 일정 변경 동기화",
        "testStrategy": "캘린더 컴포넌트 렌더링 테스트, 일정 데이터 표시 테스트, 제스처 인터랙션 테스트, 일정 변경 동기화 테스트",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-14T13:27:34.708Z",
      "updated": "2025-07-14T17:08:52.143Z",
      "description": "Tasks for master context"
    }
  }
}